name: CI Pipeline

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  client:
    name: Client Build & Test
    runs-on: self-hosted

    defaults:
      run:
        working-directory: ./client

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: "./client/package-lock.json"

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Lint check
        run: npm run lint:check

      - name: Format check
        run: npm run format:check

      - name: Build client
        run: npm run build

      - name: Run tests
        run: npm test -- --coverage --ci --watchAll=false
        env:
          CI: true

  server:
    name: Server Build & Test
    runs-on: self-hosted

    defaults:
      run:
        working-directory: ./server

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: "./server/package-lock.json"

      - name: Install dependencies
        run: npm ci

      - name: Lint check
        run: npm run lint:check

      - name: Format check
        run: npm run format:check

      - name: Build server
        run: npm run build

      - name: Run tests
        run: npm test -- --ci
        env:
          CI: true

  deploy-server:
    if: github.ref == 'refs/heads/main'
    needs: [client, server]
    runs-on: self-hosted
    environment: production
    container: ghcr.io/railwayapp/cli:latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          clean: true

      - name: Deploy to Railway
        run: |
          cd server
          railway up --service=${{ env.SVC_ID }}
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
          SVC_ID: ${{ vars.SVC_ID }}

  deploy-client:
    if: github.ref == 'refs/heads/main'
    needs: [client, server]
    runs-on: self-hosted
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: client/package-lock.json

      - name: Install dependencies
        run: |
          cd client
          npm ci

      - name: Deploy to Vercel
        run: |
          npx vercel link --project ${{ vars.VERCEL_PROJECT_ID}} --token ${{ secrets.VERCEL_TOKEN }} --yes client
          npx vercel deploy --prod --token ${{ secrets.VERCEL_TOKEN }} --yes --cwd client
        env:
          REACT_APP_WS_URL: ${{ vars.REACT_APP_WS_URL }}

  ci-success:
    name: CI Success
    runs-on: self-hosted
    needs: [client, server, deploy-server, deploy-client]
    steps:
      - name: Mark CI as successful
        run: echo "All CI checks passed successfully!"
