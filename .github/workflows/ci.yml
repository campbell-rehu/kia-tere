name: CI Pipeline

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  client:
    name: Client Build & Test
    runs-on: self-hosted

    defaults:
      run:
        working-directory: ./client

    steps:
      - name: Cleanup workspace
        run: |
          chmod -R 755 $GITHUB_WORKSPACE || true
          rm -rf $GITHUB_WORKSPACE/* || true
          rm -rf $GITHUB_WORKSPACE/.* || true

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          clean: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: "./client/package-lock.json"

      - name: Clear npm cache
        run: npm cache clean --force

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Lint check
        run: npm run lint:check || true # Don't fail on lint errors

      - name: Format check
        run: npm run format:check || true # Don't fail on format errors

      - name: Build client
        run: npm run build

      - name: Run tests
        run: npm test -- --coverage --ci --watchAll=false
        env:
          CI: true

  server:
    name: Server Build & Test
    runs-on: self-hosted

    defaults:
      run:
        working-directory: ./server

    steps:
      - name: Cleanup workspace
        run: |
          chmod -R 755 $GITHUB_WORKSPACE || true
          rm -rf $GITHUB_WORKSPACE/* || true
          rm -rf $GITHUB_WORKSPACE/.* || true

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          clean: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: "./server/package-lock.json"

      - name: Clear npm cache
        run: npm cache clean --force

      - name: Install dependencies
        run: npm ci

      - name: Lint check
        run: npm run lint:check || true

      - name: Format check
        run: npm run format:check || true

      - name: Build server
        run: npm run build

      - name: Run tests
        run: npm test -- --ci
        env:
          CI: true

  deploy-server:
    if: github.ref == 'refs/heads/main'
    needs: [client, server]
    runs-on: self-hosted
    environment: production

    steps:
      - name: Cleanup workspace
        run: |
          chmod -R 755 $GITHUB_WORKSPACE || true

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          clean: true

      - name: Install Railway CLI
        run: |
          if ! command -v railway &> /dev/null; then
            npm install -g @railway/cli
          fi

      - name: Deploy to Railway
        working-directory: ./server
        run: |
          echo "Deploying server to Railway..."
          railway up --service ${{ secrets.RAILWAY_SERVICE_ID }} --detach
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

  deploy-client:
    if: github.ref == 'refs/heads/main'
    needs: [client, server, deploy-server]
    runs-on: self-hosted
    environment: production

    steps:
      - name: Cleanup workspace
        run: |
          chmod -R 755 $GITHUB_WORKSPACE || true

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          clean: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: "./client/package-lock.json"

      - name: Install Vercel CLI
        run: |
          if ! command -v vercel &> /dev/null; then
            npm install -g vercel@latest
          fi

      - name: Install client dependencies
        working-directory: ./client
        run: npm ci --legacy-peer-deps

      - name: Create production environment file
        working-directory: ./client
        run: |
          echo "REACT_APP_WS_URL=${{ vars.REACT_APP_WS_URL }}" > .env.production
          cat .env.production

      - name: Build client
        working-directory: ./client
        run: npm run build
        env:
          NODE_ENV: production

      - name: Deploy to Vercel
        working-directory: ./client
        run: |
          # Set up Vercel project
          vercel link --yes --token ${{ secrets.VERCEL_TOKEN }}

          # Deploy the built files
          vercel deploy --prod --prebuilt --token ${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

  cleanup:
    name: Cleanup
    runs-on: self-hosted
    needs: [deploy-server, deploy-client]
    if: always()

    steps:
      - name: Final cleanup
        run: |
          chmod -R 755 $GITHUB_WORKSPACE || true
          rm -rf $GITHUB_WORKSPACE/* || true
          rm -rf $GITHUB_WORKSPACE/.* || true
          echo "Cleanup completed"
